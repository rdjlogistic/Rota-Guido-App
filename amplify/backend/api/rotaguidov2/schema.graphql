# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!
type LocalizedString {
	textIT: String
	textEN: String
	textES: String
	textFR: String
	textDE: String
	textRO: String
	textRU: String
}

type UserCategory @model 
	@auth(rules: [{allow: public}]) {
	id: ID!
	name: LocalizedString
	isActive: Boolean
}

type S3Object {
	bucket: String!
	key: String!
	region: String!
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

interface File {
	id: ID!
	file: S3Object
	mimeType: String
	_extension: String
	size: Int
	uploadDate: AWSDateTime
}

type Media implements File @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	file: S3Object
	mimeType: String
	_extension: String
	size: Int
	uploadDate: AWSDateTime
	kind: MediaType
	width: Int
	height: Int
	duration: Int
	thumb : Media @hasOne
}


type Slider @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: LocalizedString
	slides: [Slide] @hasMany(indexName: "bySlider", fields: ["id"])
}

type Slide @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	sliderID: ID! @index(name: "bySlider")
	index: Int
	name: LocalizedString
	caption: LocalizedString
	media: Media @hasOne
}



type News @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	title: LocalizedString
	subtitle: LocalizedString
	_abstract: LocalizedString
	text: LocalizedString
	slider: Slider @hasOne
	tags: [String]
	relatedProducts: [Product] @manyToMany(relationName: "NewsProduct")
}

type Page @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: LocalizedString
	isActive: Boolean
	slider: Slider @hasOne
}

type Product @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: LocalizedString
	subtitle: LocalizedString
	_abstract: LocalizedString
	description: LocalizedString
	image: Media @hasOne
	slider: Slider @hasOne
	categories: [ProductCategory] @manyToMany(relationName: "ProductProductCategory")
	relatedNews: [News] @manyToMany(relationName: "NewsProduct")
	relatedProducts: [Product] @hasMany
	search: String
	isVisible: Boolean
}

type ProductCategory @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: LocalizedString
	description: LocalizedString
	image: Media @hasOne
	isInHomePage: Boolean
	isVisible: Boolean
	isMain: Boolean    	
	subCategories: [ProductCategory] @hasMany
	products: [Product] @manyToMany(relationName: "ProductProductCategory")
}

interface Person {
  id: ID!
  name: String
  lastName: String
  fiscalCode: String
  fiscalAddress: Address
}

type Customer implements Person @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: String
	lastName: String
	fiscalCode: String
	fiscalAddress: Address @hasOne
	vatNumber: String
	companyName: String
	sdiCode: String
	pec: AWSEmail
	accessCode: String
}

type Address @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	zipCode: String
	street: String
	houseNumber: String
	city: String
	stateProvince: String
	nation: String
}

type Ewon @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	t2mccount: String
	t2musername: String
	t2mpassword: String
	t2mdeveloperid: String
	t2mdeviceusername: String
	t2mdevicepassword: String
	sensors: [EwonSensor] @hasMany(indexName: "byEwon", fields: ["id"])
	customer: Customer @hasOne
}

type EwonSensor @model  
	@auth(rules: [{ allow: public }]) {
	id: ID!
	tagName: String
	tagAddress: String
	ewonID: ID! @index(name: "byEwon")
	ewon: Ewon @belongsTo(fields: ["ewonID"])
	records: [EwonSensorRecords] @hasMany(indexName: "byEwonSensor", fields: ["id"])
}

type EwonSensorRecords @model
	@auth(rules: [{ allow: public }]) {
  	timestamp: AWSTimestamp
  	ewonSensorID: ID! @index(name: "byEwonSensor")
  	sensor: EwonSensor @belongsTo(fields: ["ewonSensorID"])
  	value: String
}

type InfoRequest @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	user: User! @hasOne
	customer: Customer @hasOne
	message: String
}

type User @model  
	@auth(rules: [{ allow: public }]) {
	id: ID!
	email: AWSEmail
	password: String
	category: UserCategory @hasOne
	company: String
	isActive: Boolean
	signupDate: AWSDateTime
	customer: Customer @hasOne
}
type BackendUser @model
	@auth(rules: [{ allow: public }]) {
	id: ID!
	email: AWSEmail
	username: String
	password: String
	isAdmin: Boolean
	roles: [ACLRole] @hasMany
	isActive: Boolean
}

type ACLRole @model 
	@auth(rules: [{ allow: public }]) {
	id: ID!
	name: String	
	isActive: Boolean	
	permissions: [ACLPermission] @hasMany
	conditions: [ACLCondition] @hasMany
}

type ACLPermission @model 
	@auth(rules: [{ allow: public }]) {
	id: ID!	
	module: String
	controller: String
	method: String
	isAuthorized: Boolean
	role: ACLRole @belongsTo
}

type ACLCondition @model 
	@auth(rules: [{ allow: public }]) {
	id: ID!	
	module: String
	controller: String
	method: String	
	condition: String
	role: ACLRole @belongsTo	
}
 